Exercises

1. Write pseudocode for bubble sort.

  FUNCTION bubbleSort(collection)
    INIT swapped
    WHILE swapped NOT FALSE
      SET swapped to FALSE
      FOR i = FIRST INDEX of collection to LAST INDEX of collection - 1
        IF collection[i] > collection[i + 1] THEN
          SET tmp to collection[i]
          SET collection[i] to collection[i + 1]
          SET collection[i + 1] to tmp
          SET swapped to TRUE
        END IF
      END FOR
    END WHILE
    RETURN collection
  END FUNCTION


2. Write pseudocode for quicksort.

  FUNCTION quickSort(collection) 
    IF collection.length <= 1 
      RETURN collection
    END IF

    SET pivot to collection[0]
    SET left to empty ARRAY
    SET right to empty ARRAY

    FOR i = 1 to collection.length - 1
      IF collection[i] > pivot
        APPEND to right
      else
        APPEND to left
      END IF
    END FOR

    CALL quickSort with right returning right
    CALL quickSort with left returning left

    SET collection to empty ARRAY
    IF left not empty
      APPEND left to collection
    END IF
    APPEND pivot to collection
    IF right not empty
      APPEND right to collection
    END IF

    RETURN collection
  END FUNCTION


3. We talked about time complexity in a previous checkpoint, and how to get an idea of the 
efficiency of an algorithm. After looking at the pseudocode for the above sorting methods, 
identify why merge sort and quick sort are much more efficient than the others. Walking through 
each algorithm with a few sample collections may help.

  The other sorting algorthms are good and easy to implement, however, they have a quadratic time
  complexity compared to the more efficient log-linear time complexity of the merge and quicksort 
  algorithms, which is going to make merge and quicksort more efficient in the long run.


4. All of the sorts addressed in this checkpoint are known as comparison sorts. Research bucket 
sort and explain how it works. What is the ideal input for bucket sort?

  Bucket sort works by taking the items in an array and sorting them into buckets, which are then sorted and
  returned to form one complete array. The ideal input would be an array of strings, or numbers.